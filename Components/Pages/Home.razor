@page "/"
@using CPRG211FinalProject.Components.Utils
@inject IJSRuntime JSRuntime

<div style="text-align: center">
    <div>
        <h4>Locate customers in database</h4>
    </div>
    <div>
        <input style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" @bind="CfirstName" placeholder="First Name">
    </div>
    <div>
        <input style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" @bind="ClastName" placeholder="Last Name">
    </div>

    <div class="justify-content-center">
        <button @onclick="SearchCustomers" class="bg-success" style="border-radius: 10px; border: 0; min-width: 90px;">Search</button>
    </div>

    <br/>
    
    @if (customers.Count != 0)
    {
        <div>
            <h5>Customer(s) found:</h5>
        </div>
    }
    
    @foreach (var customer in customers)
    {
        <div class="rounded px-3 py-2 mb-2" style="background-color: #d9d9d9; min-width: 500px">
            <div class="w-100" style="min-width: fit-content;">
                <div class="row">
                    <div class="col-6">
                        <div>@customer.FirstName</div>
                        <div>@customer.LastName</div>
                    </div>
                    <div class="col-6">
                        <div>@customer.Email</div>
                        <div>@customer.PhoneNumber</div>
                    </div>
                    <div class="col-6">
                        <div>@customer.Memberships</div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (SearchReturnedNone1)
    {
        <p style="color: #2c3034;">No results found</p>
    }
    
    <br/><br/>
    
    <div>
        <h4>Locate equipment in database</h4>
    </div>
    <div>
        <input style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" @bind="ESerialNumber" placeholder="Serial Number">
    </div>

    <div class="justify-content-center">
        <button @onclick="SearchEquipment" class="bg-success" style="border-radius: 10px; border: 0; min-width: 90px;">Search</button>
    </div>

    <br/>
    
    @if (equipment.Count != 0)
    {
        <div>
            <h5>Equipment found:</h5>
        </div>
    }
    
    @foreach (var eq in equipment)
    {
        <div class="rounded px-3 py-2 mb-2" style="background-color: #d9d9d9; min-width: 500px">
            <div class="w-100" style="min-width: fit-content;">
                <div class="row">
                    <div class="col-6">
                        <div>SN: @eq.SerialNumber</div>
                        <div>PN: @eq.ProductNumber</div>
                    </div>
                    <div class="col-6">
                        <div>@eq.Description</div>
                        <div>@eq.Location</div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (SearchReturnedNone2)
    {
        <p style="color: #2c3034;">No results found</p>
    }
    
    <br/><br/>
    
    <div>
        <h4>Locate memberships in database</h4>
    </div>
    <div>
        <input style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" @bind="MId" placeholder="ID">
    </div>

    <div class="justify-content-center">
        <button @onclick="SearchMemberships" class="bg-success" style="border-radius: 10px; border: 0; min-width: 90px;">Search</button>
    </div>
    
    <br/>
    
    @if (memberships.Count != 0)
    {
        <div>
            <h5>Memberships found:</h5>
        </div>
    }
    
    @foreach (var membership in memberships)
    {
        <div class="rounded px-3 py-2 mb-2" style="background-color: #d9d9d9; min-width: 500px">
            <div class="w-100" style="min-width: fit-content;">
                <div class="row">
                    <div class="col-6">
                        <div>@membership.Id</div>
                        <div>@membership.Name</div>
                    </div>
                    <div class="col-6">
                        <div>@membership.Type</div>
                        <div>@membership.Price</div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (SearchReturnedNone3)
    {
        <p style="color: #2c3034;">No results found</p>
    }
</div>

@code {
    // customer
    private string? CfirstName { get; set; }
    private string? ClastName { get; set; }
    private List<CustomerObj> customers = new();
    private bool SearchReturnedNone1 { get; set; }
    
    // equipment
    private string? ESerialNumber { get; set; }
    private List<EquipmentObj> equipment = new();
    private bool SearchReturnedNone2 { get; set; }
    
    // memberships
    private string? MId { get; set; } 
    private List<MembershipObj> memberships = new();
    private bool SearchReturnedNone3 { get; set; }

    private async Task SearchCustomers()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(CfirstName) && string.IsNullOrWhiteSpace(ClastName))
            {
                SearchReturnedNone1 = true;
                if (customers.Count != 0) customers.Clear(); // clear all objects from previous search on next search
                return;
            }
            
            customers.Clear();
            
            var data = await new Database().ExecuteQueryWithResult($"SELECT * FROM customer WHERE FirstName = '{CfirstName}' OR LastName = '{ClastName}'");
        
            foreach (var customer in data)
            {
                customers.Add(new CustomerObj(
                    Convert.ToInt32(customer["ID"]),
                    customer["FIRSTNAME"]?.ToString() ?? throw new InvalidOperationException(),
                    customer["LASTNAME"]?.ToString() ?? throw new InvalidOperationException(),
                    customer["EMAIL"]?.ToString() ?? throw new InvalidOperationException(), // TODO replace with regex 
                    customer["PHONENUMBER"]?.ToString(), // TODO check
                    null // TODO implement later
                ));

                if (customer["FIRSTNAME"]?.ToString() == CfirstName && customer["LASTNAME"]?.ToString() == ClastName) break; // stop iterating if an exact match is found
            }
        }
        catch (InvalidInputException e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }

        SearchReturnedNone1 = customers.Count == 0;
        
        CfirstName = null; // reset text fields
        ClastName = null;
    }
    
    private async Task SearchEquipment()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(ESerialNumber))
            {
                SearchReturnedNone2 = true;
                if (equipment.Count != 0) equipment.Clear(); // clear all objects from previous search on next search
                return;
            }
            
            equipment.Clear();
            
            var data = await new Database().ExecuteQueryWithResult($"SELECT * FROM equipment WHERE SerialNumber = '{ESerialNumber}'");
        
            foreach (var eq in data)
             {
                equipment.Add(new EquipmentObj(
                    eq["SERIALNUMBER"]?.ToString() ?? throw new InvalidOperationException(),
                    eq["PRODUCTNUMBER"]?.ToString() ?? throw new InvalidOperationException(),
                    eq["DESCRIPTION"]?.ToString() ?? throw new InvalidOperationException(),
                    eq["LOCATION"]?.ToString() ?? throw new InvalidOperationException()
                ));

                if (eq["SERIALNUMBER"]?.ToString() == ESerialNumber) break; // stop iterating if an exact match is found
            }
        }
        catch (InvalidInputException e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }
        
        SearchReturnedNone2 = equipment.Count == 0;

        ESerialNumber = null; // reset text fields
    }
    
    private async Task SearchMemberships()
    {
        try
        {
            if(!Int32.TryParse(MId, out _)) throw new InvalidInputException("Please enter a valid number greater than 0");
            
            if (MId == null) 
            {
                SearchReturnedNone3 = true;
                if (memberships.Count != 0) memberships.Clear(); // clear all objects from previous search on next search
                return;
            }
            
            memberships.Clear();
            
            var data = await new Database().ExecuteQueryWithResult($"SELECT * FROM memberships WHERE Id = {Convert.ToInt32(MId)}");
            
            foreach (var membership in data)
            {
                memberships.Add(new MembershipObj(
                    membership["NAME"]?.ToString() ?? throw new InvalidOperationException(),
                    membership["TYPE"]?.ToString() ?? throw new InvalidOperationException(),
                    Convert.ToInt32(membership["ID"]),
                    Convert.ToDouble(membership["PRICE"])
                ));

                if (Convert.ToInt32(membership["ID"]) == Convert.ToInt32(MId)) break; // stop iterating if an exact match is found
            }
        }
        catch (InvalidInputException e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }
        
        SearchReturnedNone3 = memberships.Count == 0;

        MId = null; // reset text fields
    }
}