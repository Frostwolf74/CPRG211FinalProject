@page "/customer"
@using System.Text.RegularExpressions
@using CPRG211FinalProject.Components.Utils
@inject IJSRuntime JSRuntime

<div style="text-align: center; max-width: 600px; margin: auto;">

    <!-- Customer Search -->
    <h2>Search Customers</h2>
    <div>
        <input @bind="CfirstName" placeholder="First Name" class="search-input" />
    </div>
    <div>
        <input @bind="ClastName" placeholder="Last Name" class="search-input" />
    </div>
    <div>
        <button @onclick="SearchCustomers" class="bg-success action-button">Search</button>
    </div>

    @if (customers.Count > 0)
    {
        <h4>Results</h4>
        @foreach (var customer in customers)
        {
            <div class="result-card">
                <div><strong>@customer.FirstName</strong> @customer.LastName</div>
                <div>@customer.Email</div>
                <div>@customer.PhoneNumber</div>
                <div>Memberships: @(customer.Memberships != null && customer.Memberships.Any() ? string.Join(", ", customer.Memberships.Select(m => m.Name)) : "(None)")</div>
            </div>
        }
    }
    else if (SearchReturnedNone1)
    {
        <p class="no-result">No customers found.</p>
    }

    <hr />

    <!-- Equipment Search -->
    <h2>Search Equipment</h2>
    <div>
        <input @bind="ESerialNumber" placeholder="Serial Number" class="search-input" />
    </div>
    <div>
        <button @onclick="SearchEquipment" class="bg-success action-button">Search</button>
    </div>

    @if (equipment.Count > 0)
    {
        <h4>Results</h4>
        @foreach (var eq in equipment)
        {
            <div class="result-card">
                <div><strong>SN:</strong> @eq.SerialNumber</div>
                <div><strong>PN:</strong> @eq.ProductNumber</div>
                <div>@eq.Description</div>
                <div><em>@eq.Location</em></div>
            </div>
        }
    }
    else if (SearchReturnedNone2)
    {
        <p class="no-result">No equipment found.</p>
    }

    <hr />

    <!-- Membership Search -->
    <h2>Search Memberships</h2>
    <div>
        <input @bind="MId" placeholder="Membership ID" class="search-input" />
    </div>
    <div>
        <button @onclick="SearchMemberships" class="bg-success action-button">Search</button>
    </div>

    @if (memberships.Count > 0)
    {
        <h4>Results</h4>
        @foreach (var membership in memberships)
        {
            <div class="result-card">
                <div><strong>@membership.Name</strong></div>
                <div>Type: @membership.Type</div>
                <div>Price: $@membership.Price</div>
            </div>
        }
    }
    else if (SearchReturnedNone3)
    {
        <p class="no-result">No memberships found.</p>
    }

</div>

<style>
    .search-input {
        width: 100%;
        margin-bottom: 10px;
        padding: 8px;
        border: 0;
        border-radius: 5px;
        background-color: #d9d9d9;
    }

    .action-button {
        border-radius: 10px;
        border: 0;
        min-width: 90px;
        padding: 8px 16px;
        margin-bottom: 20px;
    }

    .result-card {
        background-color: #d9d9d9;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 8px;
        text-align: left;
    }

    .no-result {
        color: #2c3034;
        margin-top: 10px;
    }

    hr {
        margin: 30px 0;
        border: 1px solid #ccc;
    }
</style>

@code {
    private string? CfirstName { get; set; }
    private string? ClastName { get; set; }
    private List<CustomerObj> customers = new();
    private bool SearchReturnedNone1 { get; set; }

    private string? ESerialNumber { get; set; }
    private List<EquipmentObj> equipment = new();
    private bool SearchReturnedNone2 { get; set; }

    private string? MId { get; set; }
    private List<MembershipObj> memberships = new();
    private bool SearchReturnedNone3 { get; set; }

    private async Task SearchCustomers()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(CfirstName) && string.IsNullOrWhiteSpace(ClastName))
            {
                SearchReturnedNone1 = true;
                customers.Clear();
                return;
            }

            if (!string.IsNullOrEmpty(CfirstName) && !Regex.IsMatch(CfirstName, @"^[a-zA-Z0-9_]+$") ||
                !string.IsNullOrEmpty(ClastName) && !Regex.IsMatch(ClastName, @"^[a-zA-Z0-9_]+$"))
            {
                throw new InvalidInputException("Please enter valid letters and/or numbers");
            }

            customers.Clear();

            var data = await new Database().ExecuteQueryWithResult($"SELECT * FROM customer WHERE FirstName = '{CfirstName}' OR LastName = '{ClastName}'");

            foreach (var customer in data)
            {
                customers.Add(new CustomerObj(
                    Convert.ToInt32(customer["ID"]),
                    customer["FIRSTNAME"]?.ToString() ?? "",
                    customer["LASTNAME"]?.ToString() ?? "",
                    customer["EMAIL"]?.ToString() ?? "",
                    customer["PHONENUMBER"]?.ToString(),
                    null
                ));
            }
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }

        SearchReturnedNone1 = customers.Count == 0;
        CfirstName = ClastName = null;
    }

    private async Task SearchEquipment()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(ESerialNumber))
            {
                SearchReturnedNone2 = true;
                equipment.Clear();
                return;
            }

            if (!Regex.IsMatch(ESerialNumber, @"^[A-Z0-9]+$"))
            {
                throw new InvalidInputException("Please enter a valid alphanumeric serial number.");
            }

            equipment.Clear();

            var data = await new Database().ExecuteQueryWithResult($"SELECT * FROM equipment WHERE SerialNumber = '{ESerialNumber}'");

            foreach (var eq in data)
            {
                equipment.Add(new EquipmentObj(
                    eq["SERIALNUMBER"]?.ToString() ?? "",
                    eq["PRODUCTNUMBER"]?.ToString() ?? "",
                    eq["DESCRIPTION"]?.ToString() ?? "",
                    eq["LOCATION"]?.ToString() ?? ""
                ));
            }
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }

        SearchReturnedNone2 = equipment.Count == 0;
        ESerialNumber = null;
    }

    private async Task SearchMemberships()
    {
        try
        {
            if (!int.TryParse(MId, out _))
                throw new InvalidInputException("Please enter a valid numeric ID.");

            if (MId == null)
            {
                SearchReturnedNone3 = true;
                memberships.Clear();
                return;
            }

            memberships.Clear();

            var data = await new Database().ExecuteQueryWithResult($"SELECT * FROM memberships WHERE Id = {MId}");

            foreach (var membership in data)
            {
                memberships.Add(new MembershipObj(
                    membership["NAME"]?.ToString() ?? "",
                    membership["TYPE"]?.ToString() ?? "",
                    Convert.ToInt32(membership["ID"]),
                    Convert.ToDouble(membership["PRICE"])
                ));
            }
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }

        SearchReturnedNone3 = memberships.Count == 0;
        MId = null;
    }
}
