@page "/customer"
@using CPRG211FinalProject.Components.Utils
@inject IJSRuntime JS

<div style="text-align: center;">
    <div>
        <h2>Locate Customers</h2>
    </div>

    <div>
        <input @bind="searchFirstName" placeholder="First Name" style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" />
    </div>
    <div>
        <input @bind="searchLastName" placeholder="Last Name" style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" />
    </div>
    <div>
        <input @bind="searchEmail" placeholder="Email" style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" />
    </div>
    <div>
        <input @bind="searchPhoneNumber" placeholder="Phone Number" style="border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px; padding-left: 10px;" />
    </div>

    <div class="justify-content-center">
        <button @onclick="SearchCustomers" class="bg-success" style="border-radius: 10px; border: 0; min-width: 90px;">Search</button>
        <button @onclick="RefreshCustomers" class="bg-success" style="border-radius: 10px; border: 0; min-width: 90px;">Refresh</button>
        <button @onclick="ToggleAddCustomerMenu" class="bg-success" style="border-radius: 10px; border: 0; min-width: 90px;">Add Customer</button>
    </div>

    <br/>

    @if (customers.Count != 0)
    {
            <div><h4>Customer(s) Found:</h4></div>
    }

    @foreach (var customer in customers)
    {
            <div class="rounded px-3 py-2 mb-2" style="background-color: #d9d9d9; min-width: 500px; cursor: pointer;" @onclick="() => OpenEditCustomerMenu(customer)">
                <div class="w-100">
                    <div class="row">
                        <div class="col-6">
                            <div>@customer.FirstName</div>
                            <div>@customer.LastName</div>
                        </div>
                        <div class="col-6">
                            <div>@customer.Email</div>
                            <div>@customer.PhoneNumber</div>
                        </div>
                        <div class="col-6">
                            <div>Membership: @(customer.Memberships != null && customer.Memberships.Any() ? string.Join(", ", customer.Memberships.Select(m => m.Name)) : "(None)")</div>
                        </div>
                    </div>
                </div>
            </div>
    }

    @if (searchReturnedNone)
    {
            <p style="color: #2c3034;">No results found</p>
    }

    <br/>
</div>

@if (showAddCustomerMenu)
{
        <div style="position: fixed; top: 0; right: 0; width: 300px; height: 100%; background-color: #f8f9fa; box-shadow: -2px 0 5px rgba(0,0,0,0.1); padding: 20px;">
            <h3>@(isEditingCustomer ? "Edit Customer" : "Add Customer")</h3>

            <div>
                <input @bind="newCustomerFirstName" placeholder="First Name" style="width: 100%; border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px;" />
            </div>
            <div>
                <input @bind="newCustomerLastName" placeholder="Last Name" style="width: 100%; border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px;" />
            </div>
            <div>
                <input @bind="newCustomerEmail" placeholder="Email" style="width: 100%; border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px;" />
            </div>
            <div>
                <input @bind="newCustomerPhoneNumber" placeholder="Phone Number (xxx-xxx-xxxx)" style="width: 100%; border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px;" />
            </div>
            <div>
                <input list="membershipOptions" @bind="selectedMembershipName" placeholder="Select or type membership..." style="width: 100%; border: 0; border-radius: 5px; background-color: #d9d9d9; margin-bottom: 10px;" />
                <datalist id="membershipOptions">
                    <option value="">(No Membership)</option>
                @foreach (var membership in allMemberships)
                {
                            <option value="@membership"></option>
                }
                </datalist>
            </div>

            <button @onclick="SaveCustomer" class="bg-success" style="width: 100%; border: 0; border-radius: 5px; margin-bottom: 10px;">Save</button>
        @if (isEditingCustomer)
        {
                    <button @onclick="DeleteCustomer" class="bg-danger" style="width: 100%; border: 0; border-radius: 5px; margin-bottom: 10px;">Delete</button>
        }
            <button @onclick="ToggleAddCustomerMenu" class="bg-success" style="width: 100%; border: 0; border-radius: 5px;">Cancel</button>
        </div>
}
@code {
    private string searchFirstName { get; set; }
    private string searchLastName { get; set; }
    private string searchEmail { get; set; }
    private string searchPhoneNumber { get; set; }

    private List<CustomerObj> customers = new();
    private List<string> allMemberships = new();
    private bool searchReturnedNone { get; set; }
    private bool showAddCustomerMenu { get; set; }
    private bool isEditingCustomer { get; set; }
    private CustomerObj? selectedCustomer { get; set; }
    private string newCustomerFirstName { get; set; }
    private string newCustomerLastName { get; set; }
    private string newCustomerEmail { get; set; }
    private string newCustomerPhoneNumber { get; set; }
    private string selectedMembershipName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAllCustomers();
        await LoadMembershipOptions();
    }

    private async Task LoadAllCustomers()
    {
        try
        {
            customers.Clear();
            var data = await new Database().ExecuteQueryWithResult(@"
                SELECT
                    c.ID,
                    c.FirstName,
                    c.LastName,
                    c.Email,
                    c.PhoneNumber,
                    GROUP_CONCAT(m.Name SEPARATOR ', ') AS Memberships
                FROM Customer c
                LEFT JOIN CustomerMembership cm ON c.ID = cm.CustomerId
                LEFT JOIN Memberships m ON cm.MembershipId = m.Id
                GROUP BY c.ID, c.FirstName, c.LastName, c.Email, c.PhoneNumber
            ");

            foreach (var customer in data)
            {
                var membershipsRaw = customer["MEMBERSHIPS"] as string ?? "";
                var membershipsList = membershipsRaw.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                                     .Select(name => new MembershipObj(name.Trim(), "", 0, 0))
                                                     .ToList();

                customers.Add(new CustomerObj(
                    Convert.ToInt32(customer["ID"]),
                    (string)customer["FIRSTNAME"],
                    (string)customer["LASTNAME"],
                    (string)customer["EMAIL"],
                    (string)customer["PHONENUMBER"],
                    membershipsList
                ));
            }
        }
        catch (Exception ex)
        {
            await DisplayAlert("Error", $"Failed to load customers: {ex.Message}", "OK");
        }
    }

    private async Task LoadMembershipOptions()
    {
        try
        {
            var data = await new Database().ExecuteQueryWithResult("SELECT Name FROM Memberships");
            allMemberships = data.Select(m => (string)m["NAME"]).ToList();
        }
        catch (Exception ex)
        {
            await DisplayAlert("Error", $"Failed to load memberships: {ex.Message}", "OK");
        }
    }

    private async Task SearchCustomers()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchFirstName) && string.IsNullOrWhiteSpace(searchLastName) &&
                string.IsNullOrWhiteSpace(searchEmail) && string.IsNullOrWhiteSpace(searchPhoneNumber))
            {
                throw new InvalidInputException("Please enter at least one field to search.");
            }

            customers.Clear();
            searchReturnedNone = false;

            var conditions = new List<string>();
            if (!string.IsNullOrWhiteSpace(searchFirstName))
                conditions.Add($"FirstName LIKE '%{searchFirstName}%'");
            if (!string.IsNullOrWhiteSpace(searchLastName))
                conditions.Add($"LastName LIKE '%{searchLastName}%'");
            if (!string.IsNullOrWhiteSpace(searchEmail))
                conditions.Add($"Email LIKE '%{searchEmail}%'");
            if (!string.IsNullOrWhiteSpace(searchPhoneNumber))
                conditions.Add($"PhoneNumber LIKE '%{searchPhoneNumber}%'");

            var whereClause = string.Join(" AND ", conditions);
            var data = await new Database().ExecuteQueryWithResult($"SELECT * FROM Customer WHERE {whereClause}");

            foreach (var customer in data)
            {
                customers.Add(new CustomerObj(
                    Convert.ToInt32(customer["ID"]),
                    (string)customer["FIRSTNAME"],
                    (string)customer["LASTNAME"],
                    (string)customer["EMAIL"],
                    (string)customer["PHONENUMBER"],
                    new List<MembershipObj>()
                ));
            }

            searchReturnedNone = customers.Count == 0;
        }
        catch (InvalidInputException ex)
        {
            await DisplayAlert("Invalid Input", ex.Message, "OK");
            customers.Clear();
            searchReturnedNone = true;
        }
        catch (Exception ex)
        {
            await DisplayAlert("Error", $"Search failed: {ex.Message}", "OK");
            customers.Clear();
            searchReturnedNone = true;
        }
        finally
        {
            searchFirstName = searchLastName = searchEmail = searchPhoneNumber = null;
        }
    }

    private async Task SaveCustomer()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newCustomerFirstName))
                throw new InvalidInputException("First name cannot be empty.");
            if (string.IsNullOrWhiteSpace(newCustomerLastName))
                throw new InvalidInputException("Last name cannot be empty.");
            if (!string.IsNullOrWhiteSpace(newCustomerPhoneNumber) && !IsValidPhoneNumber(newCustomerPhoneNumber))
                throw new InvalidInputException("Phone number must be in the format xxx-xxx-xxxx.");
            if (!string.IsNullOrWhiteSpace(newCustomerEmail) && !IsValidEmail(newCustomerEmail))
                throw new InvalidInputException("Invalid email address.");

            var db = new Database();

            if (isEditingCustomer && selectedCustomer != null)
            {
                db.UpdateCustomer(selectedCustomer.Id, newCustomerFirstName, newCustomerLastName, newCustomerEmail, newCustomerPhoneNumber);

                // Remove old memberships
                db.RemoveAllCustomerMemberships(selectedCustomer.Id);
            }
            else
            {
                db.AddCustomer(newCustomerFirstName, newCustomerLastName, newCustomerEmail, newCustomerPhoneNumber);

                // Load the latest inserted customer (by email) to get the ID
                var result = await db.ExecuteQueryWithResult($"SELECT Id FROM Customer WHERE Email = '{newCustomerEmail}' LIMIT 1");
                selectedCustomer = new CustomerObj(
                    Convert.ToInt32(result.First()["ID"]),
                    newCustomerFirstName,
                    newCustomerLastName,
                    newCustomerEmail,
                    newCustomerPhoneNumber,
                    new List<MembershipObj>()
                );
            }

            // Only link membership if one was selected
            if (!string.IsNullOrEmpty(selectedMembershipName))
            {
                var membershipResult = await db.ExecuteQueryWithResult($"SELECT Id FROM Memberships WHERE Name = '{selectedMembershipName}' LIMIT 1");

                if (membershipResult.Count > 0)
                {
                    int membershipId = Convert.ToInt32(membershipResult.First()["ID"]);
                    db.AddCustomerMembership(selectedCustomer.Id, membershipId);
                }
            }

            await LoadAllCustomers();
            ToggleAddCustomerMenu();
        }
        catch (InvalidInputException ex)
        {
            await DisplayAlert("Invalid Input", ex.Message, "OK");
        }
        catch (Exception ex)
        {
            await DisplayAlert("Error", $"Save failed: {ex.Message}", "OK");
        }
    }


    private async Task DeleteCustomer()
    {
        try
        {
            if (selectedCustomer != null)
            {
                new Database().RemoveCustomer(selectedCustomer.Id);
                await LoadAllCustomers();
                ToggleAddCustomerMenu();
            }
        }
        catch (Exception ex)
        {
            await DisplayAlert("Error", $"Delete failed: {ex.Message}", "OK");
        }
    }

    private void ToggleAddCustomerMenu()
    {
        showAddCustomerMenu = !showAddCustomerMenu;
        if (!showAddCustomerMenu)
        {
            ResetCustomerForm();
        }
    }

    private void OpenEditCustomerMenu(CustomerObj customer)
    {
        selectedCustomer = customer;
        newCustomerFirstName = customer.FirstName;
        newCustomerLastName = customer.LastName;
        newCustomerEmail = customer.Email;
        newCustomerPhoneNumber = customer.PhoneNumber ?? "";
        selectedMembershipName = customer.Memberships?.FirstOrDefault()?.Name ?? "";
        isEditingCustomer = true;
        showAddCustomerMenu = true;
    }

    private void ResetCustomerForm()
    {
        newCustomerFirstName = "";
        newCustomerLastName = "";
        newCustomerEmail = "";
        newCustomerPhoneNumber = "";
        selectedMembershipName = "";
        isEditingCustomer = false;
        selectedCustomer = null;
    }

    private bool IsValidPhoneNumber(string phoneNumber)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(phoneNumber, @"^\d{3}-\d{3}-\d{4}$");
    }

    private bool IsValidEmail(string email)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    }

    private async Task DisplayAlert(string title, string message, string button)
    {
        await JS.InvokeVoidAsync("displayAlert", title, message, button);
    }

    private async Task RefreshCustomers()
    {
        searchFirstName = searchLastName = searchEmail = searchPhoneNumber = "";
        searchReturnedNone = false;
        await LoadAllCustomers();
    }
}
